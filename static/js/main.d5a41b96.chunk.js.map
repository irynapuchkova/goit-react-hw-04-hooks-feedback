{"version":3,"sources":["Components/Section /Section.styled.jsx","Components/Section /Section.jsx","Components/Statistics/Statistics.styled.jsx","Components/Statistics/Statistics.jsx","Components/FeedbackOptions/FeedbackOptions.styled.jsx","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Notification/Notification.styled.jsx","Components/Notification/Notification.jsx","App/App.styled.jsx","App/App.jsx","index.js"],"names":["Wrapper","styled","div","Title","h2","props","primary","Section","children","title","FeedbackOptions","FeedbackItem","p","Counter","span","Total","Percentage","Statistics","good","neutral","bad","total","positivePercentage","BtnList","Button","button","bgColor","options","onLeaveFeedback","map","option","type","onClick","Message","Notification","message","Container","App","useState","goodMark","setGoodMark","neutralMark","setNeutralMark","badMark","setBadMark","countTotalFeedback","Number","parseInt","countPositiveFeedbackPercentage","e","target","textContent","toLowerCase","state","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5a41b96.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\nwidth: 500px;\n`\nexport const Title = styled.h2`\n  font-size: 36px;\n  color: ${(props) => props.primary ? 'darkslateblue' : 'darkred'}; \n`","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport {Wrapper, Title} from './Section.styled';\n\nexport default function Section({ children, title, primary}) {\n  return (\n    <Wrapper>\n      {title && <Title primary={primary}>{title}</Title>}\n      {children}\n    </Wrapper>\n  )\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  primary: PropTypes.bool,\n  children: PropTypes.node,\n}","import styled from \"@emotion/styled\";\n\nexport const FeedbackOptions = styled.div`\ndisplay: flex;\nflex-direction: column;\n\npadding-left: 20px;\n`\nexport const FeedbackItem = styled.p`\ndisplay: flex;\nmargin-block-end: 10px;\n\ntext-decoration: none;\ncolor: darkslateblue;\n`\nexport const Counter = styled.span`\ncolor: darkred;\n`\nexport const Total = styled.span`\ncolor: darkred;\n`\nexport const Percentage = styled.span`\ncolor: darkred;\n`","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport {FeedbackOptions, FeedbackItem, Counter, Percentage, Total} from './Statistics.styled';\n  \nexport default function Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <FeedbackOptions>\n      <FeedbackItem>Good:<Counter>{good}</Counter></FeedbackItem>\n      <FeedbackItem>Neutral: <Counter>{neutral}</Counter></FeedbackItem>\n      <FeedbackItem>Bad:<Counter>{bad}</Counter></FeedbackItem>\n      <FeedbackItem>Total:<Total>{total}</Total></FeedbackItem>\n      <FeedbackItem>Positive feedback: <Percentage>{positivePercentage >= 0 ? positivePercentage : 0} %</Percentage></FeedbackItem>\n    </FeedbackOptions>\n  )\n}\n\nStatistics.propTypes = {\n  options: PropTypes.shape({\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n  }),\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number\n}","import styled from '@emotion/styled';\n\nexport const BtnList = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const Button = styled.button`\n  padding: 5px 10px;\n  margin-right: 10px;\n  width: 90px;\n  height: 35px;\n  text-transform: capitalize;\n  border-radius: 5px;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    color: darkslateblue;\n    border: none;\n    background-color: ${props => {\n      switch (props.bgColor) {\n        case 'good':\n          return 'yellowgreen';\n        case 'neutral':\n          return 'yellow';\n        case 'bad':\n          return 'lightblue';\n        default:\n          return 'grey';\n      }\n    }};\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BtnList, Button } from './FeedbackOptions.styled';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <BtnList>\n      {options.map(option => {\n        return (\n          <Button\n            key={option}\n            type=\"button\"\n            bgColor={option}\n            onClick={onLeaveFeedback}\n          >\n            {option}\n          </Button>\n        );\n      })}\n    </BtnList>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\n};\n","import styled from \"@emotion/styled\";\n\nexport const Message = styled.p`\ncolor: red;\n`","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport {Message} from './Notification.styled';\n\nexport default function Notification({message}) {\n  return (\n    <Message type='text'>{message}</Message>\n  )\n}\n\nNotification.propTypes = {\n  message: PropTypes.string,\n}","import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  padding: 0 100px;\n`\n\n\n","import 'normalize.css';\n\nimport { useState } from 'react';\n\nimport Section from 'Components/Section ';\nimport Statistics from 'Components/Statistics';\nimport FeedbackOptions from 'Components/FeedbackOptions';\nimport Notification from 'Components/Notification';\nimport { Container } from './App.styled';\n\nexport default function App() {\n  const [goodMark, setGoodMark] = useState(0);\n  const [neutralMark, setNeutralMark] = useState(0);\n  const [badMark, setBadMark] = useState(0);\n\n  const options = ['good', 'bad', 'neutral'];\n\n  const onClick = e => {\n    switch (e.target.textContent.toLowerCase()) {\n      case 'good':\n        setGoodMark(state => state + 1);\n        break;\n      case 'neutral':\n        setNeutralMark(state => state + 1);\n        break;\n      case 'bad':\n        setBadMark(state => state + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    const total = goodMark + neutralMark + badMark;\n    return total;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n    const positivePercentage = (goodMark * 100) / total;\n    const parsedPositivePercentage = Number.parseInt(positivePercentage);\n    return parsedPositivePercentage;\n  };\n\n  const total = countTotalFeedback();\n  const positivePercentage = countPositiveFeedbackPercentage();\n\n  return (\n    <Container>\n      <Section title=\"Please, tell us about us)))\" primary>\n        <FeedbackOptions options={options} onLeaveFeedback={onClick} />\n      </Section>\n      <Section title=\"Statistics\">\n        {total === 0 && <Notification message=\"No feedback given\" />}\n        {total !== 0 && (\n          <Statistics\n            good={goodMark}\n            neutral={neutralMark}\n            bad={badMark}\n            total={total}\n            positivePercentage={positivePercentage}\n          />\n        )}\n      </Section>\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}